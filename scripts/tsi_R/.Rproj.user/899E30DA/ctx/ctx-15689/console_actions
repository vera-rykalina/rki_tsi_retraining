{
    "type": [
        2,
        2,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        3,
        3,
        3,
        3,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        0,
        1,
        0,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        0,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        0,
        0,
        1,
        2
    ],
    "data": [
        "\nR version 4.4.0 (2024-04-24 ucrt) -- \"Puppy Cup\"\nCopyright (C) 2024 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64\n\nR ist freie Software und kommt OHNE JEGLICHE GARANTIE.\nSie sind eingeladen, es unter bestimmten Bedingungen weiter zu verbreiten.\nTippen Sie 'license()' or 'licence()' für Details dazu.\n\nR ist ein Gemeinschaftsprojekt mit vielen Beitragenden.\nTippen Sie 'contributors()' für mehr Information und 'citation()',\num zu erfahren, wie R oder R packages in Publikationen",
        " zitiert werden können.\n\nTippen Sie 'demo()' für einige Demos, 'help()' für on-line Hilfe, oder\n'help.start()' für eine HTML Browserschnittstelle zur Hilfe.\nTippen Sie 'q()', um R zu verlassen.\n\n",
        "> ",
        "#!/usr/bin/env Rscript",
        "> ",
        "> ",
        "# Install and load packages if needed",
        "> ",
        "if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {",
        "+ ",
        "  install.packages(\"BiocManager\")",
        "+ ",
        "}",
        "> ",
        "if (!requireNamespace(\"DECIPHER\", quietly = TRUE)) {",
        "+ ",
        "  BiocManager::install(\"DECIPHER\")",
        "+ ",
        "}",
        "> ",
        "if (!requireNamespace(\"Biostrings\", quietly = TRUE)) {",
        "+ ",
        "  BiocManager::install(\"Biostrings\")",
        "+ ",
        "}",
        "> ",
        "> ",
        "library(DECIPHER)",
        "Lade nötiges Paket: Biostrings\nLade nötiges Paket: BiocGenerics\n\nAttache Paket: ‘BiocGenerics’\n\nDie folgenden Objekte sind maskiert von ‘package:stats’:\n\n    IQR, mad, sd, var, xtabs\n\nDie folgenden Objekte sind maskiert von ‘package:base’:\n\n    anyDuplicated, aperm, append, as.data.frame, basename, cbind, colnames, dirname,\n    do.call, duplicated, eval, evalq, Filter, Find, get, grep, grepl, intersect,\n    is.unsorted, lapply, Map, mapply, match, mget, order, paste, pmax, pmax.int, pmin,\n    ",
        "pmin.int, Position, rank, rbind, Reduce, rownames, sapply, saveRDS, setdiff, table,\n    tapply, union, unique, unsplit, which.max, which.min\n\nLade nötiges Paket: S4Vectors\nLade nötiges Paket: stats4\n\nAttache Paket: ‘S4Vectors’\n\nDas folgende Objekt ist maskiert ‘package:utils’:\n\n    findMatches\n\nDie folgenden Objekte sind maskiert von ‘package:base’:\n\n    expand.grid, I, unname\n\nLade nötiges Paket: IRanges\n\nAttache Paket: ‘IRanges’\n\nDas folgende Objekt ist maskiert ‘package:grDevices’:",
        "\n\n    windows\n\nLade nötiges Paket: XVector\nLade nötiges Paket: GenomeInfoDb\n\nAttache Paket: ‘Biostrings’\n\nDas folgende Objekt ist maskiert ‘package:base’:\n\n    strsplit\n\nWarnmeldungen:\n1: Paket ‘DECIPHER’ wurde unter R Version 4.4.1 erstellt \n2: Paket ‘Biostrings’ wurde unter R Version 4.4.2 erstellt \n3: Paket ‘BiocGenerics’ wurde unter R Version 4.4.1 erstellt \n4: Paket ‘S4Vectors’ wurde unter R Version 4.4.1 erstellt \n5: Paket ‘IRanges’ wurde unter R Version 4.4.2 erstellt \n6",
        ": Paket ‘XVector’ wurde unter R Version 4.4.1 erstellt \n7: Paket ‘GenomeInfoDb’ wurde unter R Version 4.4.2 erstellt \n",
        "> ",
        "library(Biostrings)",
        "> ",
        "> ",
        "# Load your reference genome FASTA (can contain multiple sequences)",
        "> ",
        "genome <- readDNAStringSet(\"data/B.FR.83.HXB2_LAI_IIIB_BRU.K03455.fasta\")",
        "> ",
        "> ",
        "# Define primer pairs as named list of DNAStringSets",
        "> ",
        "primer_pairs <- list(",
        "+ ",
        "  gag = DNAStringSet(c(\"TAGCAGTGGCGCCCGAACAG\", \"CCCATGCATTYAAAGTYCTAGGTGA\")),",
        "+ ",
        "  INT = DNAStringSet(c(\"GTCTACCTGGCATGGGTACCAGCRC\", \"ATCCTGTCTACYTGCCACACAA\")),",
        "+ ",
        "  PR = DNAStringSet(c(\"CCCTCARATCACTCTTTGGCARCGA\", \"CCTAATTGAACYTCCCARAARTCYTGAGT\")),",
        "+ ",
        "  RT = DNAStringSet(c(\"AAACAATGGCCATTRACAGARGA\", \"CTAAYTTYTGTATRTCATTGACAGTCCA\"))",
        "+ ",
        ")",
        "> ",
        "> ",
        "# Helper function: reverse complement with degenerate bases support",
        "> ",
        "revcomp <- function(primer) {",
        "+ ",
        "  as.character(reverseComplement(DNAString(primer)))",
        "+ ",
        "}",
        "> ",
        "> ",
        "# Function to find matches for one primer (forward or reverse complement)",
        "> ",
        "find_primer_matches <- function(primer, subject) {",
        "+ ",
        "  # primer: DNAString with possible IUPAC codes",
        "+ ",
        "  # subject: DNAStringSet (the genome sequences)",
        "+ ",
        "  vmatchPattern(primer, subject, max.mismatch = 0, with.indels = FALSE)",
        "+ ",
        "}",
        "> ",
        "> ",
        "results <- data.frame()",
        "> ",
        "> ",
        "for (pair_name in names(primer_pairs)) {",
        "+ ",
        "  primers <- primer_pairs[[pair_name]]",
        "+ ",
        "  forward_primer <- DNAString(primers[1])",
        "+ ",
        "  reverse_primer <- DNAString(primers[2])",
        "+ ",
        "  reverse_primer_rc <- reverseComplement(reverse_primer)",
        "+ ",
        "  ",
        "+ ",
        "  # Search primers in genome sequences",
        "+ ",
        "  fwd_matches <- find_primer_matches(forward_primer, genome)",
        "+ ",
        "  rev_matches <- find_primer_matches(reverse_primer_rc, genome)",
        "+ ",
        "  ",
        "+ ",
        "  # Collect matches as data.frame for easier processing",
        "+ ",
        "  fwd_df <- data.frame(",
        "+ ",
        "    seqnames = names(genome)[queryHits(fwd_matches)],",
        "+ ",
        "    start = start(fwd_matches),",
        "+ ",
        "    end = end(fwd_matches),",
        "+ ",
        "    width = width(fwd_matches),",
        "+ ",
        "    stringsAsFactors = FALSE",
        "+ ",
        "  )",
        "+ ",
        "  rev_df <- data.frame(",
        "+ ",
        "    seqnames = names(genome)[queryHits(rev_matches)],",
        "+ ",
        "    start = start(rev_matches),",
        "+ ",
        "    end = end(rev_matches),",
        "+ ",
        "    width = width(rev_matches),",
        "+ ",
        "    stringsAsFactors = FALSE",
        "+ ",
        "  )",
        "+ ",
        "  ",
        "+ ",
        "  if (nrow(fwd_df) == 0 || nrow(rev_df) == 0) {",
        "+ ",
        "    message(sprintf(\"No PCR products found for primer pair: %s\", pair_name))",
        "+ ",
        "    next",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  # Find pairs on the same chromosome/sequence with forward before reverse",
        "+ ",
        "  # and calculate product size",
        "+ ",
        "  products <- data.frame()",
        "+ ",
        "  for (i in seq_len(nrow(fwd_df))) {",
        "+ ",
        "    for (j in seq_len(nrow(rev_df))) {",
        "+ ",
        "      if (fwd_df$seqnames[i] == rev_df$seqnames[j] && fwd_df$start[i] < rev_df$end[j]) {",
        "+ ",
        "        product_start <- fwd_df$start[i]",
        "+ ",
        "        product_end <- rev_df$end[j]",
        "+ ",
        "        product_size_with_primers <- product_end - product_start + 1",
        "+ ",
        "        amplicon_size_no_primers <- product_size_with_primers - width(forward_primer) - width(reverse_primer)",
        "+ ",
        "        ",
        "+ ",
        "        products <- rbind(products, data.frame(",
        "+ ",
        "          primer_pair = pair_name,",
        "+ ",
        "          seqname = fwd_df$seqnames[i],",
        "+ ",
        "          product_start = product_start,",
        "+ ",
        "          product_end = product_end,",
        "+ ",
        "          product_size_with_primers = product_size_with_primers,",
        "+ ",
        "          amplicon_size_no_primers = amplicon_size_no_primers,",
        "+ ",
        "          forward_start = fwd_df$start[i],",
        "+ ",
        "          forward_end = fwd_df$end[i],",
        "+ ",
        "          reverse_start = rev_df$start[j],",
        "+ ",
        "          reverse_end = rev_df$end[j],",
        "+ ",
        "          stringsAsFactors = FALSE",
        "+ ",
        "        ))",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  if (nrow(products) == 0) {",
        "+ ",
        "    message(sprintf(\"No valid PCR products found for primer pair: %s\", pair_name))",
        "+ ",
        "    next",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  results <- rbind(results, products)",
        "+ ",
        "}",
        "Fehler: kann keine vererbte Methode finden für Funktion ‘XString’ für Signatur ‘x = \"DNAStringSet\"’\n",
        "> ",
        "#!/usr/bin/env Rscript",
        "> ",
        "> ",
        "# 1. Libraries ------------------------------------------------------------",
        "> ",
        "> ",
        "suppressMessages({",
        "+ ",
        "  library(argparse)",
        "+ ",
        "  library(readxl)",
        "+ ",
        "  library(dplyr)",
        "+ ",
        "})",
        "Warnmeldungen:\n1: Paket ‘argparse’ wurde unter R Version 4.4.3 erstellt \n2: Paket ‘readxl’ wurde unter R Version 4.4.3 erstellt \n3: Paket ‘dplyr’ wurde unter R Version 4.4.1 erstellt \n",
        "> ",
        "> ",
        "> ",
        "> ",
        "# 2. Create parser --------------------------------------------------------",
        "> ",
        "> ",
        "parser <- ArgumentParser(description = \"Filter Excel data to select samples ",
        "+ ",
        "                                        for TSI retraining output CSV + TXT\")",
        "Fehler in findpython::find_python_cmd(required_modules = required_modules) : \n  Couldn't find a sufficient Python binary. If you haven't installed the Python dependency yet please do so. If you have but it isn't on the system path (as is default on Windows) please add it to path or set options('python_cmd'='/path/to/binary')  or set the PYTHON, PYTHON2, or PYTHON3 environmental variables.   Python must have access to the modules: argparse, json | simplejson\n",
        "> ",
        "#!/usr/bin/env Rscript",
        "> ",
        "> ",
        "# 1. Libraries ------------------------------------------------------------",
        "> ",
        "> ",
        "suppressMessages({",
        "+ ",
        "  library(argparse)",
        "+ ",
        "  library(readxl)",
        "+ ",
        "  library(dplyr)",
        "+ ",
        "})",
        "> ",
        "> ",
        "> ",
        "> ",
        "# 2. Create parser --------------------------------------------------------",
        "> ",
        "> ",
        "parser <- ArgumentParser(description = \"Filter Excel data to select samples ",
        "+ ",
        "                                        for TSI retraining output CSV + TXT\")",
        "Fehler in findpython::find_python_cmd(required_modules = required_modules) : \n  Couldn't find a sufficient Python binary. If you haven't installed the Python dependency yet please do so. If you have but it isn't on the system path (as is default on Windows) please add it to path or set options('python_cmd'='/path/to/binary')  or set the PYTHON, PYTHON2, or PYTHON3 environmental variables.   Python must have access to the modules: argparse, json | simplejson\n",
        "> ",
        "# 1. Libraries ------------------------------------------------------------",
        "> ",
        "> ",
        "suppressMessages({",
        "+ ",
        "  library(argparse)",
        "+ ",
        "  library(readxl)",
        "+ ",
        "  library(dplyr)",
        "+ ",
        "})",
        "> ",
        "> ",
        "> ",
        "> ",
        "# 2. Create parser --------------------------------------------------------",
        "> ",
        "> ",
        "parser <- ArgumentParser(description = \"Filter Excel data to select samples ",
        "+ ",
        "                                        for TSI retraining output CSV + TXT\")",
        "Fehler in findpython::find_python_cmd(required_modules = required_modules) : \n  Couldn't find a sufficient Python binary. If you haven't installed the Python dependency yet please do so. If you have but it isn't on the system path (as is default on Windows) please add it to path or set options('python_cmd'='/path/to/binary')  or set the PYTHON, PYTHON2, or PYTHON3 environmental variables.   Python must have access to the modules: argparse, json | simplejson\n",
        "> ",
        "# 1. Libraries ------------------------------------------------------------",
        "> ",
        "library(readxl)",
        "> ",
        "library(dplyr)",
        "> ",
        "library(ggplot2)",
        "Keep up to date with changes at https://tidyverse.org/blog/\nWarnmeldung:\nPaket ‘ggplot2’ wurde unter R Version 4.4.3 erstellt \n",
        "> ",
        "library(tidyr)",
        "\nAttache Paket: ‘tidyr’\n\nDas folgende Objekt ist maskiert ‘package:S4Vectors’:\n\n    expand\n\nWarnmeldung:\nPaket ‘tidyr’ wurde unter R Version 4.4.1 erstellt \n",
        "> ",
        "library(psych)",
        "\nAttache Paket: ‘psych’\n\nDie folgenden Objekte sind maskiert von ‘package:ggplot2’:\n\n    %+%, alpha\n\nDie folgenden Objekte sind maskiert von ‘package:IRanges’:\n\n    distance, reflect\n\nWarnmeldung:\nPaket ‘psych’ wurde unter R Version 4.4.3 erstellt \n",
        "> ",
        "library(ggpmisc)",
        "Lade nötiges Paket: ggpp\nRegistered S3 methods overwritten by 'ggpp':\n  method                  from   \n  heightDetails.titleGrob ggplot2\n  widthDetails.titleGrob  ggplot2\n\nAttache Paket: ‘ggpp’\n\nDas folgende Objekt ist maskiert ‘package:ggplot2’:\n\n    annotate\n\nWarnmeldungen:\n1: Paket ‘ggpmisc’ wurde unter R Version 4.4.3 erstellt \n2: Paket ‘ggpp’ wurde unter R Version 4.4.3 erstellt \n",
        "> ",
        "library(greekLetters)",
        "Warnmeldung:\nPaket ‘greekLetters’ wurde unter R Version 4.4.3 erstellt \n",
        "> ",
        "library(openxlsx)",
        "Warnmeldung:\nPaket ‘openxlsx’ wurde unter R Version 4.4.3 erstellt \n",
        "> ",
        "### Seroconvertor samples (singles) ###",
        "> ",
        "serocovertor_df <- read_excel(\"data/hiv_phylotsi_validation.xlsx\",sheet = \"Singles_hivtime_v2\")",
        "> ",
        "head(serocovertor_df) ",
        "\u001B[38;5;246m# A tibble: 6 × 29\u001B[39m\n  scount   sample_number first_or_followup duration_of_infection_days subtype_prrt se_vl_zu_blut_dat\n  \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m            \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m                                  \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m                    \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m\n\u001B[38;5;250m1\u001B[39m 00-00823             1 first                                      5 B                       \u001B[4m5\u001B[24m\u001B[4m",
        "9\u001B[24m\u001B[4m8\u001B[24m000\n\u001B[38;5;250m2\u001B[39m 02-00069             1 first                                     59 CRF02_AG                    \u001B[31mNA\u001B[39m\n\u001B[38;5;250m3\u001B[39m 02-00638             1 first                                      3 B                           \u001B[31mNA\u001B[39m\n\u001B[38;5;250m4\u001B[39m 03-00128             1 first                                    244 B                       \u001B[4m7\u001B[24m\u001B[4m5\u001B[24m\u001B[4m0\u001B[24m000\n\u001B[38;5;250m5\u001B[39m 03-00131             1 first                                      6 B       ",
        "                 \u001B[4m2\u001B[24m\u001B[4m7\u001B[24m400\n\u001B[38;5;250m6\u001B[39m 03-00173             1 first                                    195 B                           \u001B[31mNA\u001B[39m\n\u001B[38;5;246m# ℹ 23 more variables: se_vl_zu_data_next <dbl>, duration_of_infection_months <dbl>,\u001B[39m\n\u001B[38;5;246m#   hivtime_v2_months <dbl>, multiplicity_of_infection <dbl>, reads_raw_mln <dbl>,\u001B[39m\n\u001B[38;5;246m#   reads_final_mln <dbl>, protocol <chr>, elisa_bed <chr>, pol_coverage <chr>, gag_coverage <chr>,\u001B[39m\n\u001B[38;5;246m#   subtype_kal",
        "listo <chr>, duplicate_hivtype_v2 <chr>, file_size_mb_r1 <dbl>, file_size_mb_r2 <dbl>,\u001B[39m\n\u001B[38;5;246m#   file_name <chr>, gap_pol <chr>, gap_pol_inf <chr>, gap_gag <chr>, gap_gag_inf <chr>,\u001B[39m\n\u001B[38;5;246m#   single_hivtime_v2 <dbl>, dual_tree <chr>, dual_all_genes <chr>, comments <chr>\u001B[39m\n",
        "> ",
        "nrow(serocovertor_df)",
        "[1] 288\n",
        "> ",
        "### Seroconvertor samples (serology) ###",
        "> ",
        "seroconvertor_serology_df <- read_excel(\"data/Rezenz-Seq_valide_SK_20211021_KM.xlsx\",sheet = \"serology\")",
        "> ",
        "head(seroconvertor_serology_df) ",
        "\u001B[38;5;246m# A tibble: 6 × 3\u001B[39m\n  scount   elisa_sum_bed biorad_avidity\n  \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m                  \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m\n\u001B[38;5;250m1\u001B[39m 00-00823 recent                  6.34\n\u001B[38;5;250m2\u001B[39m 02-00069 recent                  4   \n\u001B[38;5;250m3\u001B[39m 02-00638 recent                  3.32\n\u001B[38;5;250m4\u001B[39m 03-00128 recent                 17.6 \n\u001B[38;5;250m5\u001B[39m 03-00131 recent                 18.2 \n\u001B[38;5;250m6\u001B[39m 03-00173 long-term      ",
        "       102.  \n",
        "> ",
        "nrow(seroconvertor_serology_df)",
        "[1] 309\n",
        "> ",
        "beehive_df <- read_excel(\"data/hiv_phylotsi_validation.xlsx\",sheet = \"Beehive\")",
        "> ",
        "head(beehive_df) ",
        "\u001B[38;5;246m# A tibble: 6 × 39\u001B[39m\n  scount   beehive_id seq_id    file_name_renamed seq_id_R1 seq_id_R2 read_1 read_2   seq    id sample\n  \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m    \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m      \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m             \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m     \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m  \u001B[3m\u001B[38;5;246m<chr>\u001B[39m\u001B[23m  \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B[23m  \u001B[3m\u001B[38;5;246m<dbl>\u001B[39m\u001B",
        "[23m\n\u001B[38;5;250m1\u001B[39m 05-00490 BEE2479    19960_3_… 19960_3_43_HIV05… 19960_3_… 19960_3_… 19960… 19960… \u001B[4m1\u001B[24m\u001B[4m9\u001B[24m960     3     43\n\u001B[38;5;250m2\u001B[39m 05-00856 BEE2480    19960_3_… 19960_3_44_HIV05… 19960_3_… 19960_3_… 19960… 19960… \u001B[4m1\u001B[24m\u001B[4m9\u001B[24m960     3     44\n\u001B[38;5;250m3\u001B[39m 05-00967 BEE2482    19960_3_… 19960_3_46_HIV05… 19960_3_… 19960_3_… 19960… 19960… \u001B[4m1\u001B[24m\u001B[4m9\u001B[24m960     3     46\n\u001B[38;5;250m4\u001B[39m 05-01179 BEE2484    19960_3_… 19960_3_48",
        "_HIV05… 19960_3_… 19960_3_… 19960… 19960… \u001B[4m1\u001B[24m\u001B[4m9\u001B[24m960     3     48\n\u001B[38;5;250m5\u001B[39m 06-00041 BEE2485    19960_3_… 19960_3_49_HIV06… 19960_3_… 19960_3_… 19960… 19960… \u001B[4m1\u001B[24m\u001B[4m9\u001B[24m960     3     49\n\u001B[38;5;250m6\u001B[39m 06-00187 BEE2488    19960_3_… 19960_3_52_HIV06… 19960_3_… 19960_3_… 19960… 19960… \u001B[4m1\u001B[24m\u001B[4m9\u001B[24m960     3     52\n\u001B[38;5;246m# ℹ 28 more variables: sample_number <dbl>, first_or_followup <chr>,\u001B[39m\n\u001B[38;5;246m#   duration_of_infection_d",
        "ays <dbl>, subtype_prrt <chr>, se_vl_zu_blut_dat <dbl>,\u001B[39m\n\u001B[38;5;246m#   se_vl_zu_data_next <dbl>, duration_of_infection_months <dbl>, hivtime_v2 <dbl>,\u001B[39m\n\u001B[38;5;246m#   multiplicity_of_infection <dbl>, reads_raw_mln <dbl>, reads_final_mln <dbl>, protocol <lgl>,\u001B[39m\n\u001B[38;5;246m#   elisa_sum_bed <lgl>, pol_coverage <chr>, gag_coverage <chr>, subtype_kallisto <chr>,\u001B[39m\n\u001B[38;5;246m#   duplicate_hivtype_v2 <lgl>, file_size_mb_r1 <dbl>, file_size_mb_r2 <dbl>, file_name <chr>,\u001B[39m\n\u001B[38;5;246m#   gap_pol",
        " <chr>, gap_pol_inf <chr>, gap_gag <chr>, gap_gag_inf <chr>, single_hivtime_v2 <dbl>, …\u001B[39m\n",
        "> ",
        "nrow(beehive_df)",
        "[1] 150\n",
        "> ",
        "# 3. Add to seroconvertor table 2 columns from serology table -------------",
        "> ",
        "seroconvertor_df <- serocovertor_df |> ",
        "+ ",
        "  left_join(",
        "+ ",
        "    seroconvertor_serology_df |> ",
        "+ ",
        "      select(scount, elisa_sum_bed, biorad_avidity), by = \"scount\")",
        "> ",
        "# 4. Select useful columns from seroconvertor df  -------------------------",
        "> ",
        "seroconvertor_df <- seroconvertor_df |>",
        "+ ",
        "  select(scount, sample_number, first_or_followup, duration_of_infection_days,",
        "+ ",
        "         subtype_prrt, se_vl_zu_blut_dat, se_vl_zu_data_next, multiplicity_of_infection,",
        "+ ",
        "         reads_raw_mln, reads_final_mln, protocol, elisa_sum_bed, biorad_avidity,",
        "+ ",
        "         pol_coverage, gag_coverage, subtype_kallisto, file_size_mb_r1, file_size_mb_r2,",
        "+ ",
        "         file_name, gap_pol, gap_pol_inf, gap_gag, gap_gag_inf, single_hivtime_v2,",
        "+ ",
        "         dual_all_genes, comments) |> ",
        "+ ",
        "  mutate(project = \"seroconvertor\")",
        "> ",
        "# 5. Select useful columns from BEEHIVE df --------------------------------",
        "> ",
        "beehive_df <- beehive_df |>",
        "+ ",
        "  select(scount, sample_number, first_or_followup, duration_of_infection_days,",
        "+ ",
        "         subtype_prrt, se_vl_zu_blut_dat, se_vl_zu_data_next, multiplicity_of_infection,",
        "+ ",
        "         reads_raw_mln, reads_final_mln,",
        "+ ",
        "         pol_coverage, gag_coverage, subtype_kallisto, file_size_mb_r1, file_size_mb_r2,",
        "+ ",
        "         file_name, gap_pol, gap_pol_inf, gap_gag, gap_gag_inf, single_hivtime_v2,",
        "+ ",
        "         dual_all_genes, comments) |> ",
        "+ ",
        "  mutate(protocol = NA, elisa_sum_bed = NA,  biorad_avidity = NA, project = \"beehive\") |> ",
        "+ ",
        "  select(all_of(colnames(seroconvertor_df)))",
        "> ",
        "# 6 Combine Seroconvertor and BEEHIVE tables ------------------------------",
        "> ",
        "full_df <- bind_rows(seroconvertor_df, beehive_df) ",
        "> ",
        "# 7. Apply some filters to the combined table -----------------------------",
        "> ",
        "full_filtered_df <- full_df |> ",
        "+ ",
        "  filter(!protocol %in% c(paste0(\"FL\", seq(1:9)))) |> ",
        "+ ",
        "  filter(comments != \"rubbish\" | is.na(comments)) |> ",
        "+ ",
        "  rename(known_tsi_days = duration_of_infection_days,",
        "+ ",
        "         viral_load_frist = se_vl_zu_blut_dat,",
        "+ ",
        "         viral_load_next = se_vl_zu_data_next,",
        "+ ",
        "         multiplicity = multiplicity_of_infection,",
        "+ ",
        "         pol_cov = pol_coverage,",
        "+ ",
        "         gag_cov = gag_coverage,",
        "+ ",
        "         pol_gap = gap_pol,",
        "+ ",
        "         gag_gap = gap_gag,",
        "+ ",
        "         gag_gap_info = gap_gag_inf,",
        "+ ",
        "         pol_gap_info = gap_pol_inf,",
        "+ ",
        "         est_tsi_months = single_hivtime_v2,",
        "+ ",
        "         multi_all_genes = dual_all_genes,",
        "+ ",
        "         comment = comments) |> ",
        "+ ",
        "  mutate(known_tsi_months = known_tsi_days / 30) |> ",
        "+ ",
        "  mutate(known_tsi_years = known_tsi_days / 365) |> ",
        "+ ",
        "  # Combine viral load from two columns",
        "+ ",
        "  mutate(viral_load = if_else(is.na(viral_load_frist), ",
        "+ ",
        "                                    viral_load_next, viral_load_frist)) |> ",
        "+ ",
        "  arrange(scount)",
        "> ",
        "colnames(full_filtered_df)",
        " [1] \"scount\"            \"sample_number\"     \"first_or_followup\" \"known_tsi_days\"   \n [5] \"subtype_prrt\"      \"viral_load_frist\"  \"viral_load_next\"   \"multiplicity\"     \n [9] \"reads_raw_mln\"     \"reads_final_mln\"   \"protocol\"          \"elisa_sum_bed\"    \n[13] \"biorad_avidity\"    \"pol_cov\"           \"gag_cov\"           \"subtype_kallisto\" \n[17] \"file_size_mb_r1\"   \"file_size_mb_r2\"   \"file_name\"         \"pol_gap\"          \n[21] \"pol_gap_info\"      \"gag_gap\"           \"gag_gap_info\"      \"est_tsi_months\"   \n[2",
        "5] \"multi_all_genes\"   \"comment\"           \"project\"           \"known_tsi_months\" \n[29] \"known_tsi_years\"   \"viral_load\"       \n",
        "> ",
        "# 8. Write out an output as an .xlsx file ------------------------------------",
        "> ",
        "write.xlsx(full_filtered_df, file = \"outputs/tsi_seroconvertor_beehive.xlsx\")",
        "> ",
        "> ",
        "> ",
        "suppressMessages({",
        "+ ",
        "  library(argparse)",
        "+ ",
        "  library(readxl)",
        "+ ",
        "  library(dplyr)",
        "+ ",
        "})",
        "> ",
        "parser <- ArgumentParser(description = \"Filter Excel data to select samples ",
        "+ ",
        "                                        for TSI retraining output CSV + TXT\")",
        "Fehler in findpython::find_python_cmd(required_modules = required_modules) : \n  Couldn't find a sufficient Python binary. If you haven't installed the Python dependency yet please do so. If you have but it isn't on the system path (as is default on Windows) please add it to path or set options('python_cmd'='/path/to/binary')  or set the PYTHON, PYTHON2, or PYTHON3 environmental variables.   Python must have access to the modules: argparse, json | simplejson\n",
        "> ",
        "parser$add_argument(\"-i\", \"--input\", required = TRUE, ",
        "+ ",
        "                                     help = \"Input Excel file (.xlsx)\")",
        "Fehler: Objekt 'parser' nicht gefunden\n",
        "> ",
        "parser$add_argument(\"-s\", \"--sheet\", default = \"1\", ",
        "+ ",
        "                                     help = \"Excel sheet name or number (default: 1)\")",
        "Fehler: Objekt 'parser' nicht gefunden\n",
        "> ",
        "parser$add_argument(\"-c\", \"--output-csv\", required = TRUE, ",
        "+ ",
        "                                          help = \"Output filtered CSV file\")",
        "Fehler: Objekt 'parser' nicht gefunden\n",
        "> ",
        "parser$add_argument(\"-t\", \"--output-txt\", required = TRUE, ",
        "+ ",
        "                                          help = \"Output TXT file with scount values\")",
        "Fehler: Objekt 'parser' nicht gefunden\n",
        "> ",
        "args <- parser$parse_args()",
        "Fehler: Objekt 'parser' nicht gefunden\n",
        "> ",
        "# Convert sheet to numeric if possible",
        "> ",
        "sheet_arg <- suppressWarnings(as.numeric(args$sheet))",
        "Fehler in args$sheet : Objekt des Typs 'closure' ist nicht indizierbar\n",
        "> ",
        "if (is.na(sheet_arg)) sheet_arg <- args$sheet",
        "Fehler: Objekt 'sheet_arg' nicht gefunden\n",
        "> ",
        "filter_excel_data <- function(input_file, output_csv, output_txt, sheet = 1) {",
        "+ ",
        "  df <- read_excel(input_file, sheet = sheet)",
        "+ ",
        " ",
        "+ ",
        "  cols_to_select <- c(\"scount\", \"project\", \"known_tsi_days\",",
        "+ ",
        "                      \"known_tsi_months\", \"est_tsi_months\", ",
        "+ ",
        "                      \"known_tsi_years\", \"sample_number\", ",
        "+ ",
        "                      \"first_or_followup\",\"viral_load\", ",
        "+ ",
        "                      \"subtype_prrt\", \"subtype_kallisto\",",
        "+ ",
        "                      \"multiplicity\", \"multi_all_genes\", ",
        "+ ",
        "                      \"elisa_sum_bed\", \"biorad_avidity\",",
        "+ ",
        "                      \"protocol\", \"file_name\",",
        "+ ",
        "                      \"file_size_mb_r1\", \"file_size_mb_r2\",",
        "+ ",
        "                      \"reads_raw_mln\", \"reads_final_mln\",  ",
        "+ ",
        "                      \"pol_gap\", \"pol_gap_info\", \"pol_cov\", ",
        "+ ",
        "                      \"gag_gap\", \"gag_gap_info\", \"gag_cov\",",
        "+ ",
        "                      \"comment\")",
        "+ ",
        "  ",
        "+ ",
        "  df_selected <- df |>  select(all_of(cols_to_select))",
        "+ ",
        "  ",
        "+ ",
        "  ",
        "+ ",
        "  # Exclude samples with low coverage or with gaps in either pol or gag regions",
        "+ ",
        "  # coverage by phyloscanner ( > 31.62 ) ",
        "+ ",
        "  # multiplicity by phyloscanner ( visual inspections, selected if not all genes involved )",
        "+ ",
        "  ",
        "+ ",
        "  df_filtered <- df_selected |> ",
        "+ ",
        "    filter(multi_all_genes != \"yes\", ",
        "+ ",
        "           pol_gap != \"yes\", pol_cov != \"uneven\",",
        "+ ",
        "           gag_gap != \"yes\", gag_cov != \"uneven\") |> ",
        "+ ",
        "    arrange(scount)",
        "+ ",
        "  ",
        "+ ",
        "  write.csv(df_filtered, output_csv, row.names = FALSE)",
        "+ ",
        "  writeLines(df_filtered$scount, con = output_txt)",
        "+ ",
        "}",
        "> ",
        "# 4. Call the function with parsed arguments ------------------------------",
        "> ",
        "filter_excel_data(args$input, args$output_csv, args$output_txt, sheet_arg)",
        "Fehler in args$input : Objekt des Typs 'closure' ist nicht indizierbar\n",
        "> ",
        "> ",
        "> ",
        "install.packages(\"argparse\")",
        "Error in install.packages : Updating loaded packages\n\nRestarting R session...\n\n"
    ]
}