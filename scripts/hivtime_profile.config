
params {
  conda_cache_dir = "conda"
  conda_create_options = ""
  conda_create_timeout = "20 min"
}


profiles {
  cq_singularity {
    singularity {
      singularity.enabled = true
      singularity.autoMounts = false
      singularity.cacheDir = "$HOME/singularity_containers/"
      docker.enabled = false
      podman.enabled = false
      shifter.enabled = false
      charliecloud.enabled = false
    }
  }

  rki_conda {
    conda {
      enabled = true
      cacheDir = params.conda_cache_dir
      createOptions = params.conda_create_options
      createTimeout = params.conda_create_timeout
    }
  }
  
  rki_mamba {
    conda {
      enabled = true
      useMamba = true
      cacheDir = params.conda_cache_dir
      createOptions = params.conda_create_options
      createTimeout = params.conda_create_timeout
    }
  }

  rki_slurm {
    executor {
      name = "slurm"
      queueSize = 20
      // exitReadTimeout = '360 sec'
      // submitRateLimit = '1/2s'
      // pollInterval = '30 sec' 
    }
    process {
      cache = "lenient"
      cpus = "1"

        withLabel: "kraken" {
          cpus = "10"
          memory = "750 GB"
          time = "4 h"
         }

        withLabel: "fastp" {
          cpus = "10"
          memory = "10 GB"
          time = "1 h"
         }

         withLabel: "spades" {
          cpus = "16"
          memory = {125.GB * task.attempt}
          time = {"4 h" * task.attempt}
          errorStrategy = { task.exitStatus in [137, 140, 143, 247] ? 'retry' : 'finish' }
          maxErrors = '-1'
          maxRetries = 3
         }

        withLabel: "cd_hit_est" {
          cpus = "2"
          memory = {0.8.GB * task.attempt}
          time = {"4 h" * task.attempt}
          errorStrategy = { task.exitStatus in [137, 140, 143, 247] ? 'retry' : 'finish' }
          maxErrors = '-1'
          maxRetries = 3
         }
          
        withLabel: "shiver" {
          cpus = "1"
          memory = {2.GB * task.attempt}
          time = {"4 h" * task.attempt}
          errorStrategy = { task.exitStatus in [1, 137, 140, 143, 247] ? 'retry' : 'finish' }
          maxErrors = '-1'
          maxRetries = 3
         }

        withLabel: "phyloscanner_align_reads" {
          cpus = "1"
          memory = "5 GB"
          time = "30 h"
         }

        withLabel: "iqtree" {
          cpus = 1
          memory = {5.GB * task.attempt}
          time = {"25 h" * task.attempt}
          errorStrategy = { task.exitStatus in [137, 140, 143] ? 'retry' : 'finish' }
          maxErrors = '-1'
          maxRetries = 3
         }

      
        withLabel: "phyloscanner_tree_analysis" {
          cpus = "5"
          memory = "10 GB"
          time = {"20 h" * task.attempt}
          errorStrategy = { task.exitStatus in [137, 140, 143] ? 'retry' : 'finish' }
          maxErrors = '-1'
          maxRetries = 3
         }

        withLabel: "normalisation" {
          cpus = "16"
          memory = {5.GB * task.attempt}
          time = {"30 h" * task.attempt}
          errorStrategy = { task.exitStatus in [137, 140, 143, 247] ? 'retry' : 'finish' }
          maxErrors = '-1'
          maxRetries = 3
         }
      }
  }

  rki_priority {
    process {
      clusterOptions = '--partition=priority'
    }
  }
}


